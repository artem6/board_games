{"version":3,"sources":["config.ts","websocketProvider.ts","App.tsx","useServerData.ts","reportWebVitals.ts","index.tsx"],"names":["configSettings","prod","API_HOST","WS_HOST","test","dev","config","key","uuid","v1","MAX_CONN_DELAY","serverUrl","connection","connectionPending","subscriptions","pendingSubscriptions","connectionDelay","authInterval","heartbeatInterval","lastHeartbeat","missedHeartbeats","increaseConnDelay","decreaseConnDelay","onError","err","console","error","onClose","a","disconnect","push","p","length","sub","shift","subscribe","event","callback","id","Promise","all","onMessage","msg","Date","now","data","message","JSON","parse","find","type","unsubscribe","e","send","OPEN","close","connectionTimeout","connect","clearTimeout","resolve","fn","setTimeout","WebSocket","addEventListener","done","sendHeartbeat","sendAuth","Error","sendMessage","s","index","indexOf","splice","stringify","sendAuthTimeout","token","heartbeatTimeout","timeToNextHeartbeat","this","App","val","useState","setVal","useEffect","websocketProvider","useServerData","className","onClick","fetch","method","headers","body","version","res","json","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8972912.chunk.js","sourcesContent":["const configSettings = {\n  prod: {\n    API_HOST: 'https://artemboardgames.herokuapp.com/',\n    WS_HOST: 'wss://artemboardgames.herokuapp.com/ws',\n  },\n  test: {\n    API_HOST: 'https://artemboardgames.herokuapp.com/',\n    WS_HOST: 'wss://artemboardgames.herokuapp.com/ws',\n  },\n  dev: {\n    API_HOST: 'http://localhost:5000/',\n    WS_HOST: 'ws://localhost:5000/ws',\n  },\n};\n\nconst ENV = (process.env.REACT_APP_ENVIRONMENT || 'dev') as keyof typeof configSettings;\ntype ConfigValues = typeof configSettings.prod;\ntype ConfigKeys = keyof ConfigValues;\n\nexport const config = <T extends ConfigKeys>(key: T): ConfigValues[T] => {\n  return configSettings[ENV][key];\n};\n\nexport const getEnv = () => {\n  return ENV;\n};\n","/**\n *\n * BROWSER ONLY\n *\n */\nimport { config } from './config';\nimport { v1 } from 'uuid';\n\nconst uuid = v1;\n\ninterface WebsocketMessage {\n  id: string | null; // response must match id of request\n  type: string;\n  message?: any;\n  error?: any;\n}\n\nexport interface Subscription {\n  event: string;\n  id: string;\n  callback: { (message: any): void };\n}\n\nconst MIN_CONNECTION_DELAY = 500;\nconst MAX_CONN_DELAY = 1 * 60 * 60 * 1000;\n\nfunction debug(...args: any[]) {\n  // console.warn(...args);\n}\n\nexport class WebsocketProvider {\n  connection: WebSocket | null = null;\n  connectionPending: any = null;\n  subscriptions: Subscription[] = [];\n  pendingSubscriptions: Subscription[] = [];\n  connectionDelay = 0;\n  serverUrl = '';\n\n  authInterval = 5 * 60 * 1000;\n\n  heartbeatInterval = 30 * 1000;\n  lastHeartbeat = 0;\n  missedHeartbeats = 0;\n\n  constructor(serverUrl: string) {\n    this.serverUrl = serverUrl;\n  }\n\n  increaseConnDelay = () => {\n    this.connectionDelay *= 2;\n    if (this.connectionDelay > MAX_CONN_DELAY) this.connectionDelay = MAX_CONN_DELAY;\n    if (this.connectionDelay < MIN_CONNECTION_DELAY) this.connectionDelay = MIN_CONNECTION_DELAY;\n    debug('ACTION: increase connection delay', this.connectionDelay);\n  };\n  decreaseConnDelay = () => {\n    if (this.connectionDelay > MIN_CONNECTION_DELAY) {\n      this.connectionDelay /= 2;\n    } else {\n      this.connectionDelay = 0;\n    }\n    debug('ACTION: reducing connection delay', this.connectionDelay);\n  };\n\n  onError = (err: any) => {\n    console.error(err);\n  };\n\n  onClose = async () => {\n    this.increaseConnDelay();\n    debug('EVENT: onClose');\n    this.disconnect();\n    this.pendingSubscriptions.push(...this.subscriptions);\n    this.subscriptions = [];\n\n    const p = [];\n    while (this.pendingSubscriptions.length) {\n      const sub = this.pendingSubscriptions.shift();\n      if (!sub) continue;\n      p.push(this.subscribe(sub.event, sub.callback, sub.id));\n    }\n    await Promise.all(p);\n    debug('EVENT: onClose complete');\n  };\n\n  // TODO - implement heartbeat : message=PING/PONG\n  onMessage = (msg: { data: string }) => {\n    debug('EVENT: onMessage');\n    this.lastHeartbeat = Date.now();\n    if (msg.data === 'PING') {\n      this.connection?.send('PONG');\n      return;\n    }\n    if (msg.data === 'PONG') return;\n    try {\n      const message: WebsocketMessage = JSON.parse(msg.data);\n      const sub = this.subscriptions.find((sub) => sub.id === message.id);\n      if (!sub) {\n        console.error(`No subscription found to listen to: ${msg.data}`);\n        return;\n      }\n      sub.callback(message.message);\n      if (message.type === 'UNSUBSCRIBE') this.unsubscribe(sub.event);\n    } catch (e) {\n      console.error('Invalid Message from Server');\n    }\n  };\n\n  disconnect = () => {\n    debug('ACTION: disconnect');\n    const connection = this.connection;\n    if (connection && connection.OPEN) connection.close();\n    this.connectionPending = null;\n    this.connection = null;\n  };\n\n  connectionTimeout: any = null;\n  connect = async () => {\n    if (this.connection && !this.connectionPending) return;\n    if (this.connectionPending) {\n      await this.connectionPending;\n      return;\n    }\n    debug('ACTION: connect');\n    clearTimeout(this.connectionTimeout);\n    this.connectionPending = new Promise(async (resolve) => {\n      debug('ACTION: connection delay', this.connectionDelay);\n      await new Promise((fn) => setTimeout(fn, this.connectionDelay));\n      debug('ACTION: connection delay complete', this.connectionDelay);\n      this.connection = new WebSocket(this.serverUrl);\n      this.connection.addEventListener('error', this.onError);\n      this.connection.addEventListener('close', this.onClose);\n      this.connection.addEventListener('message', this.onMessage);\n      let done = false;\n      debug('ACTION: listen to open event');\n      // connected\n      this.connection.addEventListener('open', () => {\n        if (done) return;\n        clearTimeout(this.connectionTimeout);\n        debug('EVENT: connection open');\n        this.connectionPending = null;\n        done = true;\n        this.sendHeartbeat();\n        this.sendAuth();\n        resolve();\n      });\n      debug('ACTION: start waiting for a timeout');\n      // if timed out, then retry\n      this.connectionTimeout = setTimeout(async () => {\n        if (done) return;\n        debug('EVENT: connection timed out');\n        await this.onClose();\n        await this.connect();\n        resolve();\n      }, 10 * 1000);\n    });\n    while (this.connectionPending) {\n      await this.connectionPending;\n    }\n    debug('ACTION: connect resolved', this.connection?.OPEN);\n  };\n\n  subscribe = async (event: string, callback: { (message: any): void }, id: string = uuid()) => {\n    await this.connect();\n    debug('ACTION: subscribe', event);\n    if (this.subscriptions.find((sub) => sub.event === event))\n      throw new Error(`Already subscribed to ${event}`);\n    const sub = { id, callback, event };\n    this.subscriptions.push(sub);\n    await this.sendMessage({\n      id: sub.id,\n      type: 'SUBSCRIBE',\n      message: { event },\n    });\n    return sub;\n  };\n\n  unsubscribe = async (event: string) => {\n    debug('ACTION: unsubscribe', event);\n    if (!this.subscriptions.length) throw new Error('No active subscriptions: ' + event);\n    const sub = this.subscriptions.find((s) => s.event === event);\n    if (!sub) return;\n    const index = this.subscriptions.indexOf(sub);\n    if (!sub || index === -1) throw new Error(`Not subscribed to ${event}`);\n    this.subscriptions.splice(index, 1);\n    await this.sendMessage({\n      id: sub.id,\n      type: 'UNSUBSCRIBE',\n      message: { event: sub.event },\n    });\n    if (this.subscriptions.length === 0) this.disconnect();\n  };\n\n  sendMessage = async (message: WebsocketMessage) => {\n    debug('ACTION: sending message start', message.message);\n    await this.connect();\n    debug('ACTION: sending message (connected)', message.message);\n    if (this.connection && this.connection.OPEN) {\n      this.connection.send(JSON.stringify(message));\n    } else {\n      setTimeout(() => this.sendMessage(message), 5000);\n    }\n  };\n\n  sendAuthTimeout: any = null;\n  sendAuth = async () => {\n    if (this.authInterval <= 0) return;\n    clearTimeout(this.sendAuthTimeout);\n    const token = '';\n    this.sendMessage({\n      id: null,\n      type: 'AUTHORIZATION',\n      message: { token },\n    });\n    this.sendAuthTimeout = setTimeout(this.sendAuth, this.authInterval);\n  };\n\n  heartbeatTimeout: any = null;\n  sendHeartbeat = () => {\n    clearTimeout(this.heartbeatTimeout);\n    if (!this.connection || this.connectionPending || !this.connection.OPEN) return;\n    if (this.heartbeatInterval <= 0) return;\n    const timeToNextHeartbeat = this.lastHeartbeat + this.heartbeatInterval - Date.now();\n\n    if (timeToNextHeartbeat * -1 > this.heartbeatInterval * 2) {\n      this.missedHeartbeats++;\n      debug('ACTION: missed heatbeat');\n    } else {\n      this.missedHeartbeats = 0;\n      this.decreaseConnDelay();\n    }\n\n    if (timeToNextHeartbeat > 0) {\n      this.heartbeatTimeout = setTimeout(this.sendHeartbeat, timeToNextHeartbeat);\n      return;\n    }\n\n    if (this.missedHeartbeats > 2) {\n      this.missedHeartbeats = 0;\n      this.onClose();\n      return;\n    }\n    debug('ACTION: send heartbeat');\n\n    this.connection.send('PING');\n    this.heartbeatTimeout = setTimeout(this.sendHeartbeat, this.heartbeatInterval);\n  };\n}\n\nexport default new WebsocketProvider(config('WS_HOST'));\n","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useServerData } from './useServerData';\nimport { config } from './config';\n\nfunction App() {\n  const val = useServerData('abc');\n\n  return (\n    <div className='App'>\n      <button\n        onClick={async () => {\n          const res = await fetch(`${config('API_HOST')}update`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ id: 'abc', version: 0, ...val, test: 'xyz' }),\n          });\n          const json = await res.json();\n        }}\n      >\n        add\n      </button>\n      <pre>{JSON.stringify(val, null, 4)}</pre>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\nimport websocketProvider from './websocketProvider';\n\nexport const useServerData = (id: string) => {\n  const [val, setVal] = useState({});\n  useEffect(() => {\n    websocketProvider.subscribe(`EntityChange:${id}`, (val) => {\n      setVal(val);\n    });\n    return () => {\n      websocketProvider.unsubscribe(`EntityChange:${id}`);\n    };\n  }, []);\n  return val;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}